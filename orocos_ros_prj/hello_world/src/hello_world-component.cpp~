#include "hello_world-component.hpp"
#include <rtt/Component.hpp>
#include <iostream>

hello_world::hello_world(std::string const& name) : TaskContext(name){
  //initialize ros before create output stream
/*  if(!ros::isInitialized()){
    int argc = __os_main_argc();
    char ** argv = __os_main_argv();

    ros::init(argc,argv,"rtt",ros::init_options::AnonymousName);
    if(ros::master::check())
      ros::start();
  }
*/
  //set the priority and period
  this->setActivity( new RTT::Activity(0, 0.001));

  //add output port to hello_world component
  this->ports()->addPort("out_port", outPort);
  outPort.createStream(rtt_roscomm::topic("/chatter"));

  std::cout << "hello_world constructed !" <<std::endl;
}

bool hello_world::configureHook(){
  std::cout << "hello_world configured !" <<std::endl;
  return true;
}

bool hello_world::startHook(){
  std::cout << "Hello_world started !" <<std::endl;
  return true;
}

void hello_world::updateHook(){
  //say hello world to ros node every period.
  std_msgs::String val;
  val.data = "hello World, orocos.";
  outPort.write( val );
  std::cout << "hello_world executes updateHook !" <<std::endl;
}

void hello_world::stopHook() {
  std::cout << "hello_world executes stopping !" <<std::endl;
}

void hello_world::cleanupHook() {
  std::cout << "hello_world cleaning up !" <<std::endl;
}

/*
 * Using this macro, only one component may live
 * in one library *and* you may *not* link this library
 * with another component library. Use
 * ORO_CREATE_COMPONENT_TYPE()
 * ORO_LIST_COMPONENT_TYPE(Hello_world)
 * In case you want to link with another library that
 * already contains components.
 *
 * If you have put your component class
 * in a namespace, don't forget to add it here too:
 */
ORO_CREATE_COMPONENT(hello_world)
